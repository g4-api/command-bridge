# Workflow to build and release OcrInspector for production
name: Build, Test & Release

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

# Set environment variables
env:
  artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
  artifactType: 'Production'
  binariesDirectory: ${{ github.workspace }}/binaries
  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'
  projectName: CommandBridge

# Default settings for all run steps
defaults:
  run:
    working-directory: src

jobs:
  # Job to get the version of the build
  new-version:
    name: New Version
    runs-on: windows-latest

    # Outputs of the job
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    # Step to checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Step to parse the build version for GitHub tag
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    # Step to validate the parsed version
    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      shell: pwsh 
      run: dotnet restore
      
    - name: Build
      shell: pwsh
      run: dotnet build

    - name: test
      shell: pwsh
      run: dotnet test -l:"trx;LogFileName=${{ env.artifactStagingDirectory }}/TestOutput.xml" --collect:"Xplat Code Coverage"
      working-directory: src/${{ env.projectName }}.UnitTests

    # Step to upload the build artifact
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ env.artifactStagingDirectory }}/TestOutput.xml

    # Step to parse the build version for GitHub tag
    - name: Coverage
      id: find-coverage-file
      shell: pwsh
      run: echo "coverageFile=$(Get-ChildItem -Path './TestResults' -Recurse -Filter 'coverage.cobertura.xml' -File | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName)}" >> $env:GITHUB_OUTPUT

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: ${{ needs.build.outputs.coverageFile }}

  test:
    runs-on: ubuntu-latest
    needs: 
      - build
    if: success()

    steps:
    - uses: actions/checkout@v4
    
    # Step to download build artifacts
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          ./TestOutput.xml

    # Step to download build artifacts
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-coverage

    - name: Code Coverage Summaryy
      uses: edaniels/CodeCoverageSummary@v1.2.3
      with:
        filename: coverage.cobertura.xml
        badge: true

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md